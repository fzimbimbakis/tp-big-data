{
	"name": "PreProcesamiento",
	"properties": {
		"description": "Se eliminan columnas innecesarias",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "usersTransactionsCsv",
						"type": "DatasetReference"
					},
					"name": "transactions",
					"description": "Importar datos de usersTransactionsCsv. Los dias se importan como yyyy-MM-dd sin tener en cuenta el horario."
				},
				{
					"dataset": {
						"referenceName": "onboardingCsv",
						"type": "DatasetReference"
					},
					"name": "onboarding"
				},
				{
					"dataset": {
						"referenceName": "usersCsv",
						"type": "DatasetReference"
					},
					"name": "users"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "transactionsClean"
				},
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "onboardingClean"
				},
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "usersClean"
				}
			],
			"transformations": [
				{
					"name": "DeleteUnconsistentRows",
					"description": "Se eliminan, si los hay, los \"cobros\" de individuals"
				},
				{
					"name": "DeleteOnboardingUnconsistentRows"
				},
				{
					"name": "cleanUsers"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          user_id as string,",
				"          transaction_dt as date 'yyyy-MM-dd',",
				"          type as integer,",
				"          segment as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> transactions",
				"source(output(",
				"          Prop_0 as string,",
				"          {Unnamed: 0} as string,",
				"          first_login_dt as date 'yyyy-MM-dd',",
				"          week_year as string,",
				"          user_id as string,",
				"          habito as integer,",
				"          habito_dt as date 'yyyy-MM-dd',",
				"          activacion as integer,",
				"          activacion_dt as date 'yyyy-MM-dd',",
				"          setup as integer,",
				"          setup_dt as date 'yyyy-MM-dd',",
				"          return as integer,",
				"          return_dt as date 'yyyy-MM-dd'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> onboarding",
				"source(output(",
				"          Prop_0 as string,",
				"          user_id as string,",
				"          name as string,",
				"          email as string,",
				"          address as string,",
				"          birth_dt as string,",
				"          phone as string,",
				"          type as string,",
				"          rubro as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> users",
				"transactions filter(or(and(type<=7, segment==1), segment == 2)) ~> DeleteUnconsistentRows",
				"onboarding filter(not(isNull(user_id)) &&  not(isNull(first_login_dt)) && habito <= activacion && activacion <= setup && habito_dt >= activacion_dt && activacion_dt >= setup_dt && first_login_dt <= habito_dt && first_login_dt <= activacion_dt && first_login_dt <= setup_dt && first_login_dt <= return_dt) ~> DeleteOnboardingUnconsistentRows",
				"users filter(!isNull(user_id) && startsWith(user_id, \"MLB\")) ~> cleanUsers",
				"DeleteUnconsistentRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'tp-big-data-files',",
				"     folderPath: 'pre-process-files',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     filePattern:'transactionsClean[n].csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          user_id,",
				"          type,",
				"          transaction_dt,",
				"          segment",
				"     )) ~> transactionsClean",
				"DeleteOnboardingUnconsistentRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'tp-big-data-files',",
				"     folderPath: 'pre-process-files',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     filePattern:'onboardingClean[n].csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          first_login_dt,",
				"          user_id,",
				"          habito,",
				"          activacion,",
				"          setup,",
				"          return",
				"     )) ~> onboardingClean",
				"cleanUsers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'tp-big-data-files',",
				"     folderPath: 'pre-process-files',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     filePattern:'usersClean[n].csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          user_id",
				"     )) ~> usersClean"
			]
		}
	}
}