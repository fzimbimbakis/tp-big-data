{
	"name": "PreProcesamiento",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "users",
						"type": "DatasetReference"
					},
					"name": "users"
				},
				{
					"dataset": {
						"referenceName": "onboarding",
						"type": "DatasetReference"
					},
					"name": "onboarding"
				},
				{
					"dataset": {
						"referenceName": "transactions",
						"type": "DatasetReference"
					},
					"name": "transactions"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "UsersClean"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "OnboardingClean"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "TransactionsClean"
				}
			],
			"transformations": [
				{
					"name": "UsersInfo"
				},
				{
					"name": "BrazilFilter"
				},
				{
					"name": "ParseDates"
				},
				{
					"name": "ParseDates2"
				},
				{
					"name": "OnboardingInfo"
				},
				{
					"name": "TransactionsInfo"
				},
				{
					"name": "BrazilFilter2"
				},
				{
					"name": "BrazilFilter3"
				},
				{
					"name": "TransactionFilter"
				},
				{
					"name": "DeleteDuplicates2"
				},
				{
					"name": "OnboardEnding"
				},
				{
					"name": "DeleteDuplicates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          user_id as string,",
				"          name as string,",
				"          email as string,",
				"          address as string,",
				"          birth_dt as string,",
				"          phone as string,",
				"          type as string,",
				"          rubro as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     multiLineRow: true) ~> users",
				"source(output(",
				"          Prop_0 as string,",
				"          {Unnamed: 0} as string,",
				"          first_login_dt as string,",
				"          week_year as string,",
				"          user_id as string,",
				"          habito as string,",
				"          habito_dt as string,",
				"          activacion as string,",
				"          activacion_dt as string,",
				"          setup as string,",
				"          setup_dt as string,",
				"          return as string,",
				"          return_dt as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> onboarding",
				"source(output(",
				"          Prop_0 as string,",
				"          user_id as string,",
				"          transaction_dt as string,",
				"          type as string,",
				"          segment as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> transactions",
				"users select(mapColumn(",
				"          user_id,",
				"          rubro",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UsersInfo",
				"DeleteDuplicates filter(startsWith(user_id,\"MLB\")) ~> BrazilFilter",
				"BrazilFilter2 derive(first_login_dt = toDate(first_login_dt,'yyyy-MM-dd'),",
				"          onboarding_ending = addDays(toDate(first_login_dt,'yyyy-MM-dd'),30),",
				"          habito_dt = toDate(habito_dt,'yyyy-MM-dd'),",
				"          activacion_dt = toDate(activacion_dt,'yyyy-MM-dd'),",
				"          setup_dt = toDate(setup_dt,'yyyy-MM-dd'),",
				"          return_dt = toDate(return_dt,'yyyy-MM-dd')) ~> ParseDates",
				"BrazilFilter3 derive(transaction_dt = toDate(transaction_dt,'yyyy-MM-dd')) ~> ParseDates2",
				"onboarding select(mapColumn(",
				"          first_login_dt,",
				"          user_id,",
				"          habito,",
				"          habito_dt,",
				"          activacion,",
				"          activacion_dt,",
				"          setup,",
				"          setup_dt,",
				"          return,",
				"          return_dt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OnboardingInfo",
				"transactions select(mapColumn(",
				"          user_id,",
				"          transaction_dt,",
				"          type,",
				"          segment",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TransactionsInfo",
				"DeleteDuplicates2, BrazilFilter join(DeleteDuplicates2@user_id == DeleteDuplicates@user_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> BrazilFilter2",
				"TransactionsInfo, OnboardEnding join(TransactionsInfo@user_id == OnboardEnding@user_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> BrazilFilter3",
				"ParseDates2 filter(between(transaction_dt, first_login_dt, onboarding_ending) && ((segment == \"1\" && type >= \"1\" && type <= \"7\") || (segment == \"2\" && type >= \"8\" && type <= \"9\"))) ~> TransactionFilter",
				"OnboardingInfo aggregate(groupBy(user_id),",
				"     each(match(name!='user_id'), $$ = first($$))) ~> DeleteDuplicates2",
				"ParseDates select(mapColumn(",
				"          user_id = DeleteDuplicates2@user_id,",
				"          first_login_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OnboardEnding",
				"UsersInfo aggregate(groupBy(user_id),",
				"     each(match(name!='user_id'), $$ = first($$))) ~> DeleteDuplicates",
				"BrazilFilter sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'users_clean',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          user_id,",
				"          rubro",
				"     ),",
				"     partitionBy('hash', 1)) ~> UsersClean",
				"ParseDates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'onboarding_clean',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          user_id = DeleteDuplicates2@user_id,",
				"          first_login_dt,",
				"          habito,",
				"          habito_dt,",
				"          activacion,",
				"          activacion_dt,",
				"          setup,",
				"          setup_dt,",
				"          return,",
				"          return_dt,",
				"          onboarding_ending",
				"     ),",
				"     partitionBy('hash', 1)) ~> OnboardingClean",
				"TransactionFilter sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'transactions_clean',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          user_id = TransactionsInfo@user_id,",
				"          transaction_dt,",
				"          type,",
				"          segment,",
				"          first_login_dt,",
				"          onboarding_ending",
				"     ),",
				"     partitionBy('hash', 1)) ~> TransactionsClean"
			]
		}
	}
}