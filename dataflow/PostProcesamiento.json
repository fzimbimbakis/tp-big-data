{
	"name": "PostProcesamiento",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "UsersClean",
						"type": "DatasetReference"
					},
					"name": "UsersClean"
				},
				{
					"dataset": {
						"referenceName": "OnboardingClean",
						"type": "DatasetReference"
					},
					"name": "OnboardingClean"
				},
				{
					"dataset": {
						"referenceName": "TransactionsClean",
						"type": "DatasetReference"
					},
					"name": "TransactionsClean"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "UserCount"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "Rates"
				}
			],
			"transformations": [
				{
					"name": "FilterHabito"
				},
				{
					"name": "CountUsers"
				},
				{
					"name": "split1"
				},
				{
					"name": "SelectHabito"
				},
				{
					"name": "SelectReturn"
				},
				{
					"name": "SelectActivacion"
				},
				{
					"name": "SelectSetup"
				},
				{
					"name": "FilterSetup"
				},
				{
					"name": "FilterActivacion"
				},
				{
					"name": "FilterReturn"
				},
				{
					"name": "Select"
				},
				{
					"name": "CountSetup"
				},
				{
					"name": "CountActivacion"
				},
				{
					"name": "CountDrop"
				},
				{
					"name": "AddKey1"
				},
				{
					"name": "AddKey2"
				},
				{
					"name": "AddKey3"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "SelectTransactions"
				},
				{
					"name": "TCountDistinct"
				},
				{
					"name": "TCount"
				},
				{
					"name": "union1"
				},
				{
					"name": "join4"
				},
				{
					"name": "CalcHabito"
				},
				{
					"name": "MatchHabito"
				},
				{
					"name": "CountHabito"
				},
				{
					"name": "AddKey4"
				},
				{
					"name": "join3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          user_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> UsersClean",
				"source(output(",
				"          user_id as string,",
				"          first_login_dt as date,",
				"          habito as integer,",
				"          habito_dt as date,",
				"          activacion as integer,",
				"          activacion_dt as date,",
				"          setup as integer,",
				"          setup_dt as date,",
				"          return as integer,",
				"          return_dt as date,",
				"          onboarding_ending as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OnboardingClean",
				"source(output(",
				"          user_id as string,",
				"          transaction_dt as date,",
				"          segment as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TransactionsClean",
				"SelectHabito filter(between(habito_dt, first_login_dt, onboarding_ending)) ~> FilterHabito",
				"Select aggregate(count = count(user_id)) ~> CountUsers",
				"SelectTransactions split(segment == 1,",
				"     disjoint: false) ~> split1@(Individuals, Sellers)",
				"OnboardingClean select(mapColumn(",
				"          user_id,",
				"          first_login_dt,",
				"          habito,",
				"          habito_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectHabito",
				"OnboardingClean select(mapColumn(",
				"          user_id,",
				"          first_login_dt,",
				"          return,",
				"          return_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReturn",
				"OnboardingClean select(mapColumn(",
				"          user_id,",
				"          first_login_dt,",
				"          activacion,",
				"          activacion_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectActivacion",
				"OnboardingClean select(mapColumn(",
				"          user_id,",
				"          first_login_dt,",
				"          setup,",
				"          setup_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSetup",
				"SelectSetup filter(between(setup_dt, first_login_dt, onboarding_ending)) ~> FilterSetup",
				"SelectActivacion filter(between(activacion_dt, first_login_dt, onboarding_ending)) ~> FilterActivacion",
				"SelectReturn filter(between(return_dt, first_login_dt, onboarding_ending)) ~> FilterReturn",
				"UsersClean select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"FilterSetup aggregate(setup = countIf(setup == 1)) ~> CountSetup",
				"FilterActivacion aggregate(activacion = countIf(activacion == 1)) ~> CountActivacion",
				"FilterReturn aggregate(drop = countIf(return == 0)) ~> CountDrop",
				"CountSetup derive(key = 1) ~> AddKey1",
				"CountActivacion derive(key = 1) ~> AddKey2",
				"CountDrop derive(key = 1) ~> AddKey3",
				"AddKey1, AddKey2 join(AddKey1@key == AddKey2@key,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, AddKey3 join(AddKey1@key == AddKey3@key,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"TransactionsClean select(mapColumn(",
				"          user_id,",
				"          transaction_dt,",
				"          segment",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTransactions",
				"split1@Individuals aggregate(groupBy(user_id),",
				"     t_count = countDistinct(transaction_dt)) ~> TCountDistinct",
				"split1@Sellers aggregate(groupBy(user_id),",
				"     t_count = count(transaction_dt)) ~> TCount",
				"TCountDistinct, TCount union(byName: true)~> union1",
				"FilterHabito, CalcHabito join(SelectHabito@user_id == union1@user_id,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"union1 derive(t_count_habito = iif(t_count >= 5, 1, 0)) ~> CalcHabito",
				"join4 filter(isNull(habito) || isNull(t_count_habito) || habito == t_count_habito) ~> MatchHabito",
				"MatchHabito aggregate(habito = countIf(habito == 1 || t_count_habito == 1)) ~> CountHabito",
				"CountHabito derive(key = 1) ~> AddKey4",
				"join2, AddKey4 join(AddKey1@key == AddKey4@key,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"CountUsers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'users',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          count",
				"     )) ~> UserCount",
				"join3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'rates',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          dropCount = drop,",
				"          activacionCount = activacion,",
				"          setupCount = setup,",
				"          habitoCount = habito",
				"     )) ~> Rates"
			]
		}
	}
}