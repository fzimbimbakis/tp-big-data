{
	"name": "fintech",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "sadfk"
				},
				{
					"dataset": {
						"referenceName": "OnboardingClean",
						"type": "DatasetReference"
					},
					"name": "sfda"
				},
				{
					"dataset": {
						"referenceName": "TransactionsClean",
						"type": "DatasetReference"
					},
					"name": "afsd"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "myinput"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "UserCount"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "Rates"
				},
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "Habito"
				}
			],
			"transformations": [
				{
					"name": "OnboardingDates"
				},
				{
					"name": "CountUsers"
				},
				{
					"name": "Aggregation"
				},
				{
					"name": "DistinctTCount"
				},
				{
					"name": "split1"
				},
				{
					"name": "TCount"
				},
				{
					"name": "union1"
				},
				{
					"name": "TCount5"
				},
				{
					"name": "Count"
				},
				{
					"name": "SelectHabito"
				},
				{
					"name": "SelectReturn"
				},
				{
					"name": "SelectActivacion"
				},
				{
					"name": "SelectSetup"
				},
				{
					"name": "FilterSetup"
				},
				{
					"name": "FilterActivacion"
				},
				{
					"name": "FilterReturn"
				},
				{
					"name": "Select"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 100,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'users_clean',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> sadfk",
				"source(output(",
				"          users as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sfda",
				"source(output(",
				"          users as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> afsd",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'users_clean',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> myinput",
				"SelectHabito filter(between(habito_dt, first_login_dt, onboarding_ending)) ~> OnboardingDates",
				"Select aggregate(users = ERROR_FUNCTION('')) ~> CountUsers",
				"OnboardingDates aggregate(drop = countIf(return == \"0\"),",
				"          activacion = countIf(activacion == \"1\"),",
				"          habito = countIf(habito == \"1.0\"),",
				"          setup = countIf(setup == \"1\")) ~> Aggregation",
				"split1@Individuals aggregate(groupBy(user_id = split1@Individuals@user_id),",
				"     transaction_count = countDistinct(transaction_dt)) ~> DistinctTCount",
				"afsd split(segment == \"1\",",
				"     disjoint: false) ~> split1@(Individuals, Sellers)",
				"split1@Sellers aggregate(groupBy(user_id = split1@Sellers@user_id),",
				"     transaction_count = count(transaction_dt)) ~> TCount",
				"DistinctTCount, TCount union(byName: true)~> union1",
				"union1 filter(transaction_count >= 5) ~> TCount5",
				"TCount5 aggregate(count = count(user_id)) ~> Count",
				"sfda select(mapColumn(",
				"          user_id = DeleteDuplicates2@user_id,",
				"          first_login_dt,",
				"          habito,",
				"          habito_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectHabito",
				"sfda select(mapColumn(",
				"          user_id = DeleteDuplicates2@user_id,",
				"          first_login_dt,",
				"          return,",
				"          return_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReturn",
				"sfda select(mapColumn(",
				"          user_id = DeleteDuplicates2@user_id,",
				"          first_login_dt,",
				"          activacion,",
				"          activacion_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectActivacion",
				"sfda select(mapColumn(",
				"          user_id = DeleteDuplicates2@user_id,",
				"          first_login_dt,",
				"          setup,",
				"          setup_dt,",
				"          onboarding_ending",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSetup",
				"SelectSetup filter(between(setup_dt, first_login_dt, onboarding_ending)) ~> FilterSetup",
				"SelectActivacion filter(between(activacion_dt, first_login_dt, onboarding_ending)) ~> FilterActivacion",
				"SelectReturn filter(between(return_dt, first_login_dt, onboarding_ending)) ~> FilterReturn",
				"sadfk select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"myinput select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CountUsers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'users',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          count = users",
				"     )) ~> UserCount",
				"Aggregation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'rates',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          dropCount = drop,",
				"          activacionCount = activacion,",
				"          habitoCount = habito,",
				"          setupCount = setup",
				"     )) ~> Rates",
				"Count sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'bigdata',",
				"     tableName: 'habito',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          count",
				"     )) ~> Habito"
			]
		}
	}
}